{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"v",
				"vertical-align"
			],
			[
				"li",
				"listen()	limit.js"
			],
			[
				"back",
				"background-color"
			],
			[
				"al",
				"alignment-baseline:   (property)"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"mult",
				"multiplyVector3( vector )	three.js"
			],
			[
				"rotationAng",
				"rotationAngleRoll"
			],
			[
				"rota",
				"rotateOnAxis()	three.js"
			],
			[
				"Vector",
				"Vector4( x, y, z, w )	three.js"
			],
			[
				"is",
				"isIncreasingTilt"
			],
			[
				"ra",
				"radioTiltTouched"
			],
			[
				"newPosition",
				"newPositionScaled"
			],
			[
				"del",
				"deltaY()	VirtualJoystick.js"
			],
			[
				"multipl",
				"multiplyScalar( s )	three.js"
			],
			[
				"addS",
				"addSelf( v )	three.js"
			],
			[
				"wei",
				"weightForce"
			],
			[
				"app",
				"applyMatrix( matrix )	three.js"
			],
			[
				"tr",
				"translateZ( distance )	three.js"
			],
			[
				"mu",
				"multiplyScalar( s )	three.js"
			],
			[
				"padd",
				"padding-bottom"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"paddin",
				"padding-top"
			],
			[
				"pa",
				"padding-top"
			],
			[
				"margin",
				"margin-left"
			],
			[
				"sub",
				"sub_menu"
			],
			[
				"an",
				"animate"
			],
			[
				"el",
				"el_title"
			],
			[
				"vi",
				"viewportHeight"
			],
			[
				"get",
				"getElementById  (function)"
			],
			[
				"getE",
				"getElementsByClassName  (function)"
			],
			[
				"render",
				"renderToScreen"
			],
			[
				"rendr",
				"renderTarget2"
			],
			[
				"pr",
				"processorChain"
			],
			[
				"po",
				"pointLight03"
			],
			[
				"effec",
				"effectSepia"
			],
			[
				"matr",
				"updateProjectionMatrix"
			],
			[
				"in",
				"innerWidth  (variable)"
			],
			[
				"inn",
				"innerHeight  (variable)"
			],
			[
				"shad",
				"shadowMapResolution"
			],
			[
				"ca",
				"castShadow"
			],
			[
				"C",
				"color"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/* TODO\n - Gestion du frame rate\n - Refonte UI\n - Redesign code\n - Gestion gamepad\n - Gestion Tablette pour commande\n - Int√©gration Google Street View\n - Lecture / playback log MK\n - \n\n*/\nif ( ! Detector.webgl ) Detector.addGetWebGLMessage();\n\nvar container, stats;\n\nvar camera, cameraLookAt, cameraOrbit, cameraOrtho, scene, sceneBG, sceneRTT, renderer, objects;\nvar composerScene, composer1, composer2, composer3, composer4, processorChain;\nvar effectFXAA;\nvar win = window;\nvar width = win.innerWidth || 2;\nvar height = win.innerHeight || 2;\nvar viewportHeight;\nvar viewportWidth;\n\nvar mouse = new THREE.Vector2();\nvar objects = [], plane;\nvar projector;\nvar video, texture;\n\nvar halfWidth = width / 2;\nvar halfHeight = height / 2;\n\nvar materialColor, material2D, quadBG, quadMask, renderScene, quadRTT;\n\nvar rtParameters;\n\nvar delta = 0.01;\n\nvar controls;\nvar pointLight01, pointLight02, pointLight03;\nvar dae, skin;\n\nvar loader = new THREE.ColladaLoader();\n\nvar controlerRoll, controlerTilt, controlerYaw;\nvar controlerGimbalRoll, controlerGimbalTilt, controlerGimbalYaw;\nvar currentRoll=0.0, currentTilt=0.0, currentYaw=0.0;\nvar currentGimbalRoll=0.0, currentGimbalTilt=0.0;\nvar tiltLimit=false, rollLimit=false;\n\nvar weightForce;\nvar motorForce;\n\nvar g = 9.81; \nvar weight = 2.0;\nvar weightForce = new THREE.Vector3(0,-weight*g,0);\nvar weightForceRep = new THREE.Vector3(0,0,0);\nvar motorForce = new THREE.Vector3(0,1.0,0);\nvar motorForceRep = new THREE.Vector3(0,0,0);\n\nvar radioRoll=0.0, radioTilt=0.0, radioYaw=0.0, radioThrottle=0.0;\nvar radioGimbalRoll=0.0, radioGimbalTilt=0.0, radioGimbalYaw=0.0;\nvar radioRollRate=1.0, radioTiltRate=1.0, radioYawRate=1.0, radioThrottleRate=1.0;\n\nvar radioYawTouched = false;\nvar radioTiltTouched = false;\n\nvar controlMode = 0;\n\nvar isIncreasingTilt = false;\nvar isDecreasingTilt = false;\nvar isIncreasingYaw = false;\nvar isDecreasingYaw = false;\n\nvar perSecond = 0.001;\n\nvar root;\nvar gimbal, gimbalTilt;\nvar targetQuat = new THREE.Quaternion();\n\nvar pointLight01, pointLight02, pointLight03;\n\nvar joystick;\n\n//Browser Support Code\nfunction CreateAjaxRequest()\n{\n    var ajaxRequest;  // The variable that makes Ajax possible!\n    try{\n        // Opera 8.0+, Firefox, Safari\n        ajaxRequest = new XMLHttpRequest();\n    } catch (e){\n        // Internet Explorer Browsers\n        try{\n            ajaxRequest = new ActiveXObject(\"Msxml2.XMLHTTP\");\n        } catch (e) {\n            try{\n                ajaxRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch (e){\n                // Something went wrong\n                alert(\"Your browser broke!\");\n                return false;\n            }\n        }\n    }\n    return ajaxRequest;\n}\n\n// Command\nfunction GetVirtualJoystickValue(){\n    ajaxRequest = CreateAjaxRequest();\n    // Create a function that will receive data sent from the server\n    ajaxRequest.onreadystatechange = function(){\n        if(ajaxRequest.readyState == 4)\n        {\n        	if( controlMode == 1 )\n        	{\n	        	var params = ajaxRequest.responseText.split(',');\n	    		radioYaw  -= (params[0] / 1000.0)*radioYawRate; \n	        	radioTilt = -(params[1] / 80.0)*radioTiltRate;\n		    	radioRoll = (params[2] / 40.0)*radioRollRate;\n	    		radioThrottle = -(params[3] / 100.0)*radioThrottleRate;\n        	}\n\n            return ajaxRequest.responseText;        	\n        }\n    }\n \n    ajaxRequest.open(\"GET\", \"/get_joystick_value\", true);\n    ajaxRequest.send(null);\n}\n\n\nfunction launchWebGL()\n{\n	log(\"Loading models ...\"+width+\" \"+height);\n\n	height = height * 80.0 / 100.0;\n	viewportWidth = width;\n	viewportHeight = height + 80.0 / 100.0;\n\n	loader.options.convertUpAxis = true;\n	loader.load( './models/collada/quadroXL/QuadXL-noCamera.DAE', function ( collada ) {\n\n		dae = collada.scene;\n		skin = collada.skins[ 0 ];\n\n		dae.scale.x = dae.scale.y = dae.scale.z = 10.0;\n		dae.updateMatrix();\n\n		init();\n		animate();\n\n	} );\n}\n\n// TODO: material replace seulement sur DAE et pas sur toute la scene\n\nfunction processModel(scene)\n{\n	log(\"Processing model...\");\n\n	var material	= new THREE.MeshPhongMaterial({\n	ambient		: 0xffffff,\n	color		: 0xffffff,\n	shininess	: 10, \n	specular	: 0xffffff,\n	shading		: THREE.SmoothShading,\n	});				\n\n	var toIntersect = [];\n	scene.traverse(function (child) \n	{\n		if (child instanceof THREE.Mesh) {\n			toIntersect.push(child);\n			child.castShadow = true;\n			child.receiveShadow = true;\n			child.material = material;\n			//log(child.name);\n			objects.push(child);\n			child.useQuaternion = true;\n		}\n		if( child.name == \"Plane001-node\" ){\n			child.visible = false;\n		}\n		if( child.name == \"digital_single_lens_camera-node\") {\n			child.castShadow = false;\n			child.receiveShadow = false;    					\n		}\n		if( child.name == \"Lens-node\") {    					\n			child.castShadow = false;\n			child.receiveShadow = false;    					\n		}\n		if( child.name == \"Cylinder002\")\n		{\n			gimbal = child;\n		}\n		if( child.name == \"Cylinder005\")\n		{\n			gimbalTilt = child;\n		}\n	});\n\n}\n\nfunction init_pid()\n{\n	controlerRoll = new PIDController(0.2, 0.01, 1.0);\n	controlerTilt = new PIDController(0.2, 0.01, 1.0);\n	controlerYaw = new PIDController(0.2, 0.01, 1.0);\n	controlerGimbalRoll = new PIDController(0.2, 0.01, 1.0);\n	controlerGimbalTilt = new PIDController(0.2, 0.01, 1.0);\n	controlerGimbalYaw = new PIDController(0.2, 0.01, 1.0);\n\n	return;\n}\n\nfunction init() {\n\n	log(\"Init...\");\n	init_pid();\n	container = document.createElement( 'div' );\n	var parentDoc = document.getElementById(\"webgl\");\n	parentDoc.appendChild( container );\n\n	scene = new THREE.Scene();\n\n	cameraLookAt = new THREE.PerspectiveCamera( 45, viewportWidth / viewportHeight, 1, 2000 );\n	cameraLookAt.position.set( 9, 2, -9 );\n\n	cameraOrbit = new THREE.PerspectiveCamera( 45, viewportWidth / viewportHeight, 1, 2000 );\n	cameraOrbit.position.set( 7, 2, 7 );\n\n	cameraOrtho = new THREE.OrthographicCamera( -halfWidth, halfWidth, halfHeight, -halfHeight, -10000, 10000 );\n	cameraOrtho.position.z = 100;\n\n	var dummy = new THREE.Object3D();\n	dummy.name = \"ROOT\";\n	dummy.useQuaternion = true;\n	root = dummy;\n	scene.add(dummy);\n\n	createLights(scene);\n	root.add( dae );\n	processModel(scene);\n\n	//weightForceRep = create_line( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, -1, 0 ), 0x000000 );\n	//motorForceRep = create_line( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ), 0xffffff );\n\n	createSkyBox(scene, \"textures/cube/Park2/\", \".jpg\", new THREE.Vector3(500.0,550.0,500.0));\n	\n	projector = new THREE.Projector();\n\n	renderer = new THREE.WebGLRenderer({\n		antialias		: false,	// to get smoother output\n		preserveDrawingBuffer	: false,	// to allow screenshot\n		alpha : true,\n		transparency: true,\n	});\n//	renderer = new THREE.CanvasRenderer();\n	renderer.setSize( width, height );\n	renderer.setClearColorHex( 0x727272, 1 );\n	renderer.autoClear = false;\n	container.appendChild( renderer.domElement );\n\n	renderer.shadowMapEnabled = true;\n	renderer.shadowMapSoft = true;\n	renderer.shadowMapBias = 0.001;\n	renderer.gammaInput = true;\n	renderer.gammaOutput = true;\n\n	// Ground\n	createPlane(scene, new THREE.Vector3(0,-3.0, 0), \n		new THREE.Vector3(-1.57079633,0,0),\n		new THREE.Vector3(10000.0,10000.0,10000.0)\n	);\n\n	controls = new THREE.OrbitControls( cameraOrbit );\n	//controls.addEventListener( 'change', renderer );\n\n	var shaderBleach = THREE.BleachBypassShader;\n	var effectBleach = new THREE.ShaderPass( shaderBleach );\n	effectBleach.uniforms[ \"opacity\" ].value = 0.95;\n\n	var shaderSepia = THREE.SepiaShader;\n	var effectSepia = new THREE.ShaderPass( shaderSepia );\n	effectSepia.uniforms[ \"amount\" ].value = 0.9;\n\n	var shaderVignette = THREE.VignetteShader;\n	var effectVignette = new THREE.ShaderPass( shaderVignette );\n	effectVignette.uniforms[ \"offset\" ].value = 0.95;\n	effectVignette.uniforms[ \"darkness\" ].value = 1.6;\n\n	var shaderCopy = THREE.CopyShader;	\n	var effectCopy = new THREE.ShaderPass( shaderCopy );\n\n	var effectBloom = new THREE.BloomPass( 0.2 );\n	var effectFilmBW = new THREE.FilmPass( 0.25, 0.3, 1024, false );\n\n	var effectHBlur = new THREE.ShaderPass( THREE.HorizontalBlurShader );\n	effectHBlur.uniforms[ 'h' ].value = 0.3 / ( width / 2 );\n\n	var effectVBlur = new THREE.ShaderPass( THREE.VerticalBlurShader );\n	effectVBlur.uniforms[ 'v' ].value = 0.3 / ( height / 2 );\n\n	var effectColorify1 = new THREE.ShaderPass( THREE.ColorifyShader );\n	effectColorify1.uniforms[ 'color' ].value.setRGB( 1, 0.8, 0.8 );\n	var effectColorify2 = new THREE.ShaderPass( THREE.ColorifyShader );\n	effectColorify2.uniforms[ 'color' ].value.setRGB( 1, 0.75, 0.5 );\n\n	var clearMask = new THREE.ClearMaskPass();\n\n	var renderMask = new THREE.MaskPass( scene, cameraLookAt );\n	var renderMaskInverse = new THREE.MaskPass( scene, cameraLookAt );\n	renderMaskInverse.inverse = true;\n\n	rtParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBAFormat, stencilBuffer: true };\n\n	var rtWidth  = width;\n	var rtHeight = height;\n\n	processorChain = new THREE.EffectComposer( renderer, new THREE.WebGLRenderTarget( rtWidth, rtHeight, rtParameters ) );\n\n	sceneRTT = new THREE.Scene();\n	var renderBackground = new THREE.RenderPass( sceneBG, cameraOrtho );\n	var renderModel = new THREE.RenderPass( scene, cameraLookAt );\n\n	effectFXAA = new THREE.ShaderPass( THREE.FXAAShader );\n	effectFXAA.uniforms[ 'resolution' ].value.set( 1 / width, 1 / height );\n	effectFXAA.renderToScreen = true;\n\n	brightnessContrast = new THREE.ShaderPass(THREE.BrightnessContrastShader);\n	brightnessContrast.uniforms[ 'brightness' ].value = -0.15;\n	brightnessContrast.uniforms[ 'contrast' ].value = 0.6;\n\n	hueSaturation = new THREE.ShaderPass(THREE.HueSaturationShader);\n	hueSaturation.uniforms[ 'hue' ].value = 0.0;\n	hueSaturation.uniforms[ 'saturation' ].value = -0.65;\n\n//	renderModel.clear = false;\n\n//  processorChain.addPass( renderBackground );\n	processorChain.addPass( renderModel );\n//	processorChain.addPass( effectHBlur );\n//	processorChain.addPass( effectVBlur );\n	\n//	processorChain.addPass( effectBloom );\n	processorChain.addPass( effectFilmBW );\n//	processorChain.addPass( effectColorify1 );\n//	processorChain.addPass( effectColorify2 );\n	processorChain.addPass( effectBleach );\n//	processorChain.addPass( effectVignette );\n	processorChain.addPass(brightnessContrast);\n	processorChain.addPass(hueSaturation);\n	processorChain.addPass( effectFXAA );		\n/*\n	var texture = THREE.ImageUtils.loadTexture( \"textures/mikrokopter/FlamencoNacelle01.png\" );\n	texture.minFilter = THREE.LinearFilter;\n	texture.magFilter = THREE.LinearFilter;\n	texture.format = THREE.RGBFormat;\n	texture.generateMipmaps = true;\n\n	createTexturedPlane(scene, new THREE.Vector3(-4,1.5, -3), \n		new THREE.Vector3(0,0.8,0),\n		new THREE.Vector3(5.0,4.0,1.0),\n		texture\n	);\n\n	var texture2 = THREE.ImageUtils.loadTexture( \"textures/mikrokopter/FlamencoNacelle02.png\" );\n	texture.minFilter = THREE.LinearFilter;\n	texture.magFilter = THREE.LinearFilter;\n	texture.format = THREE.RGBFormat;\n	texture.generateMipmaps = true;\n\n	createTexturedPlane(scene, new THREE.Vector3(4,1.5, -3), \n		new THREE.Vector3(0,-0.8,0),\n		new THREE.Vector3(5.0,4.0,1.0),\n		texture2\n	);\n*/\n	stats = new Stats();\n	stats.domElement.style.position = 'absolute';\n	stats.domElement.style.bottom = '30px';\n	stats.domElement.style.right = '0px';\n	container.appendChild( stats.domElement );\n\n	win.addEventListener( 'resize', onwinResize, false );\n\n	renderer.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );\n	renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );\n	renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUp, false );\n	onwinResize();\n\n}\n\nfunction onwinResize() {\n    viewportWidth = win.innerWidth;\n    viewportHeight = win.innerHeight;\n	cameraLookAt.aspect = viewportWidth / viewportHeight;\n	cameraLookAt.updateProjectionMatrix();\n\n	cameraOrtho.left = -halfWidth;\n	cameraOrtho.right = halfWidth;\n	cameraOrtho.top = halfHeight;\n	cameraOrtho.bottom = -halfHeight;\n\n	cameraOrtho.updateProjectionMatrix();\n\n	renderer.setSize( viewportWidth, viewportHeight );\n	processorChain.reset( new THREE.WebGLRenderTarget( viewportWidth, viewportHeight, rtParameters ) );\n	effectFXAA.uniforms[ 'resolution' ].value.set( 1 /  viewportWidth, 1 /  viewportHeight );\n\n}\n\n\nvar t = 0;\nvar clock = new THREE.Clock();\nvar previousTime = new Date().getTime();\nvar currentTime = new Date().getTime();\n\nfunction animate() {\n	setTimeout(function(){\n	    animate();\n	}, $( \"#ui-sliderFrameRate\" ).slider(\"option\", \"value\"));\n\n	if ( t > 1 )\n\n	controls.update();\n	render();\n	stats.update();\n}\n\nfunction radioControl_init()\n{\n\n}\n\nfunction radioControl_update()\n{\n\n}\nvar counter = 0;\nfunction render() {\n\n	currentTime = new Date().getTime();\n	var deltaTime = currentTime - previousTime;\n	previousTime = currentTime;\n	perSecond = deltaTime * 0.01;\n\n	var noise = (Math.cos( currentTime * 0.000000000001) * $( \"#ui-sliderNoise\" ).slider(\"option\", \"value\"));\n	var wind = ($( \"#ui-sliderWind\" ).slider(\"option\", \"value\"))*perSecond;\n\n	joystick.diffX = 0.006;\n	joystick.diffY = 0.004;\n\n	//////////// ROTATION ///////////////\n	// Tilt\n	var targetTilt = $( \"#ui-sliderRoll\" ).slider(\"option\", \"value\");\n	controlerTilt.Execute(currentTilt, radioTilt, perSecond);\n	var rotationAngleTilt = controlerTilt.outputCommand * 0.02 * perSecond + noise ;\n\n	var rotationMatrixTilt = new THREE.Matrix4();\n	rotationMatrixTilt.makeRotationX(rotationAngleTilt);\n\n/*	var root_axisX = new THREE.Vector3( 1, 0, 0);\n	var quaternionX = new THREE.Quaternion();\n	quaternionX.setFromAxisAngle( root_axisX, rotationAngleTilt );\n*/	currentTilt += rotationAngleTilt;\n\n	var gimbal_axisTilt = new THREE.Vector3(0,1,0);\n	var quaternionGimbalTilt = new THREE.Quaternion();\n	quaternionGimbalTilt.setFromAxisAngle(gimbal_axisTilt, rotationAngleTilt);\n	gimbalTilt.quaternion.multiply(quaternionGimbalTilt);\n\n	// Yaw\n	controlerYaw.Execute(currentYaw, radioYaw, perSecond);\n	var rotationAngleYaw = controlerYaw.outputCommand * 0.02 * perSecond + noise;\n/*	var root_axisY = new THREE.Vector3( 0, 1, 0);\n	var quaternionY = new THREE.Quaternion();\n	quaternionY.setFromAxisAngle( root_axisY, rotationAngleYaw );\n*/\n	currentYaw += rotationAngleYaw;\n\n	// Roll\n	var targetRoll = $( \"#ui-sliderRoll\" ).slider(\"option\", \"value\");\n	if( controlMode == 0)\n		radioRoll = joystick.deltaX()*joystick.diffX*radioRollRate;\n	\n	controlerRoll.Execute(currentRoll, radioRoll, perSecond);\n	console.log(currentRoll);\n	var rotationAngleRoll = (controlerRoll.outputCommand * 0.02 * perSecond) + wind + noise;\n\n	var root_axisZ = new THREE.Vector3( 0, 0, 1);\n	var quaternionZ = new THREE.Quaternion();\n	quaternionZ.setFromAxisAngle( root_axisZ, rotationAngleRoll );\n	currentRoll += rotationAngleRoll;\n\n	controlerGimbalRoll.Execute(currentGimbalRoll, -currentRoll, perSecond);	\n	var rotationAngleGimbalRoll = (controlerGimbalRoll.outputCommand * 0.02 * perSecond) + wind + noise;\n\n	var gimbal_axisZ = new THREE.Vector3(0,1,0);\n	var quaternionGimbalZ = new THREE.Quaternion();\n	quaternionGimbalZ.setFromAxisAngle(gimbal_axisZ, rotationAngleGimbalRoll);\n	gimbal.quaternion.multiply(quaternionGimbalZ);\n	currentGimbalRoll += rotationAngleGimbalRoll;\n\n	var newQuat = quaternionZ.normalize().clone();\n	newQuat.multiply(quaternionX.normalize());\n	newQuat.multiply(quaternionY.normalize());\n	newQuat.normalize();\n	root.quaternion.multiply(newQuat);\n\n	/////////////// Position ////////////\n	var currentPosition = root.position.clone();\n	var newPosition;\n\n	var speed = $( \"#ui-sliderSpeed\" ).slider(\"option\", \"value\");\n	var allForces = new THREE.Vector3( 0, 0, 0 );\n\n	// Weight\n	var weightForceDiff = weightForce.clone();\n	weightForceDiff.multiplyScalar( 0.02 );\n	allForces.add( weightForceDiff );\n\n	// MotorForce\n	motorForce = root_axisY.clone(); \n	motorForce.applyQuaternion(root.quaternion);\n	\n	if( controlMode == 0)\n		radioThrottle = -joystick.deltaY()*joystick.diffY*radioThrottleRate;\n\n	if( radioThrottle < 0.0 )\n			radioThrottle = 0.0;\n\n	allForces.add( motorForce.multiplyScalar( radioThrottle ));\n\n	// Update pos\n	newPosition = currentPosition.clone();\n	newPosition.add(allForces);\n\n	if( newPosition.y < -1.0)\n		newPosition.y = -1.0;\n	\n	root.position = newPosition;\n\n	cameraLookAt.lookAt(newPosition);\n	pointLight01.position = newPosition.clone().add(new THREE.Vector3(-6,6,-2));\n	pointLight02.position = newPosition.clone().add(new THREE.Vector3(6,1,-2));\n	pointLight03.position = newPosition.clone().add(new THREE.Vector3(0,2,6));\n	pointLight01.target.position = newPosition.clone();\n	pointLight02.target.position = newPosition.clone();\n	pointLight03.target.position = newPosition.clone();\n\n	// Visual rep of forces\n//			update_line(weightForceRep, new THREE.Vector3( newPosition.x, newPosition.y, newPosition.z ), weightForce);\n//			update_line(motorForceRep, new THREE.Vector3( newPosition.x, newPosition.y, newPosition.z ), motorForce);\n\n	renderer.clear();\n	processorChain.render(perSecond);\n}\n\nfunction createFlare(scene, position, color)\n{\n	log(\"Creating new flare...\");\n\n	// lens flares\n	var textureFlare0 = THREE.ImageUtils.loadTexture( \"textures/lensflare/lensflare0.png\" );\n	var textureFlare2 = THREE.ImageUtils.loadTexture( \"textures/lensflare/lensflare2.png\" );\n	var textureFlare3 = THREE.ImageUtils.loadTexture( \"textures/lensflare/lensflare3.png\" );\n\n	var flareColor = new THREE.Color( color );\n	THREE.ColorUtils.adjustHSV( flareColor, 0, -0.5, 0.5 );\n\n	var lensFlare = new THREE.LensFlare( textureFlare0, 700, 0.0, THREE.AdditiveBlending, flareColor );\n\n	lensFlare.add( textureFlare2, 512, 0.0, THREE.AdditiveBlending );\n	lensFlare.add( textureFlare2, 512, 0.0, THREE.AdditiveBlending );\n	lensFlare.add( textureFlare2, 512, 0.0, THREE.AdditiveBlending );\n\n	lensFlare.add( textureFlare3, 60, 0.6, THREE.AdditiveBlending );\n	lensFlare.add( textureFlare3, 70, 0.7, THREE.AdditiveBlending );\n	lensFlare.add( textureFlare3, 120, 0.9, THREE.AdditiveBlending );\n	lensFlare.add( textureFlare3, 70, 1.0, THREE.AdditiveBlending );\n\n	lensFlare.customUpdateCallback = lensFlareUpdateCallback;\n	lensFlare.position = position;\n\n	scene.add( lensFlare );\n}\n\n function lensFlareUpdateCallback( object ) {\n\n	var f, fl = object.lensFlares.length;\n	var flare;\n	var vecX = -object.positionScreen.x * 2;\n	var vecY = -object.positionScreen.y * 2;\n\n\n	for( f = 0; f < fl; f++ ) {\n\n		   flare = object.lensFlares[ f ];\n\n		   flare.x = object.positionScreen.x + vecX * flare.distance;\n		   flare.y = object.positionScreen.y + vecY * flare.distance;\n\n		   flare.rotation = 0;\n\n	}\n\n	object.lensFlares[ 2 ].y += 0.025;\n	object.lensFlares[ 3 ].rotation = object.positionScreen.x * 0.5 + 45 * Math.PI / 180;\n\n}\n\nfunction createLights(scene)\n{\n	log(\"Creating lights...\");\n\n	var shadowMapResolution = 256;\n	var fov = 70;\n	// Lights\n	// orange\n	var color1 = new THREE.Color(0xca5825);\n	pointLight01 = new THREE.SpotLight(color1.getHex(), 0.8);\n	var pos1 = new THREE.Vector3(-5.0, 5.0, -2.0);\n	pointLight01.position.set(pos1.x, pos1.y, pos1.z);\n	pointLight01.target.position.set(0,0,0);\n	pointLight01.shadowCameraNear = 1.0;\n	pointLight01.shadowCameraFar = 500.0;\n	pointLight01.castShadow = true;\n	pointLight01.shadowDarkness = 0.2;\n	pointLight01.shadowCameraVisible = false;\n	pointLight01.shadowMapWidth = shadowMapResolution;\n	pointLight01.shadowMapHeight = shadowMapResolution;\n	pointLight01.shadowCameraFov = fov;\n	scene.add(pointLight01);\n	pointLight01Mesh = new THREE.Mesh( new THREE.SphereGeometry( 0.1, 8, 8 ), new THREE.MeshBasicMaterial( { color: color1 } ) );\n	pointLight01Mesh.position.set(pos1.x, pos1.y, pos1.z);\n//	scene.add( pointLight01Mesh );\n\n	// blue\n	var color2 = new THREE.Color(0x9cb3c8);\n	pointLight02 = new THREE.SpotLight(color2.getHex(), 1.0);\n	var pos2 = new THREE.Vector3(5.0,1.0,-2.0);\n	pointLight02.position.set(pos2.x, pos2.y, pos2.z);\n	pointLight02.target.position.set(0,0,0);\n	pointLight02.shadowCameraNear = 1.0;\n	pointLight02.shadowCameraFar = 500.0;\n	pointLight02.castShadow = false;\n	pointLight02.shadowDarkness = 0.3;\n	pointLight02.shadowCameraVisible = false;\n	pointLight02.shadowCameraFov = fov;\n\n	pointLight02.shadowMapWidth = shadowMapResolution;\n	pointLight02.shadowMapHeight = shadowMapResolution;\n	scene.add(pointLight02);\n	pointLight02Mesh = new THREE.Mesh( new THREE.SphereGeometry( 0.1, 8, 8 ), new THREE.MeshBasicMaterial( { color: color2 } ) );\n	pointLight02Mesh.position.set(pos2.x, pos2.y, pos2.z);\n//	scene.add( pointLight02Mesh );\n\n	// white\n	var color3 = new THREE.Color(0xadabab);\n	pointLight03 = new THREE.SpotLight(color3.getHex(), 0.7);\n	var pos3 = new THREE.Vector3(0.0,2.0,5.0);\n	pointLight03.position.set(pos3.x, pos3.y, pos3.z);\n	pointLight03.target.position.set(0,0,0);\n	pointLight03.shadowCameraNear = 1.0;\n	pointLight03.shadowCameraFar = 500.0;\n	pointLight03.castShadow = true;\n	pointLight03.shadowDarkness = 0.2;\n	pointLight03.shadowCameraVisible = false;\n	pointLight03.shadowCameraFov = fov;\n\n	pointLight03.shadowMapWidth = shadowMapResolution;\n	pointLight03.shadowMapHeight = shadowMapResolution;\n	scene.add(pointLight03);\n	pointLight03Mesh = new THREE.Mesh( new THREE.SphereGeometry( 0.1, 8, 8 ), new THREE.MeshBasicMaterial( { color: color3 } ) );\n	pointLight03Mesh.position.set(pos3.x, pos3.y, pos3.z);\n//	scene.add( pointLight03Mesh );\n\n//	createFlare(scene, pointLight01.position, pointLight01.color);\n//	createFlare(scene, pointLight02.position, pointLight02.color);\n//	createFlare(scene, pointLight03.position, pointLight03.color);\n\n	scene.add( new THREE.AmbientLight( 0x727272 ) );\n}\n\nfunction log(msg) {\n    setTimeout(function() {\n	throw new Error(msg);\n	}, 0);\n}\n\nfunction change_uvs( geometry, unitx, unity, offsetx, offsety ) {\n\n	var i, j, uv;\n\n	for ( i = 0; i < geometry.faceVertexUvs[ 0 ].length; i++ ) {\n\n		uv = geometry.faceVertexUvs[ 0 ][ i ];\n\n		for ( j = 0; j < uv.length; j++ ) {\n\n			uv[j].u = ( uv[j].u + offsetx ) * unitx;\n			uv[j].v = ( uv[j].v + offsety ) * unity;\n\n		}\n\n	}\n\n}\n\nfunction createTexturedPlane(scene, position, rotation, scale, texture)\n{	\n	log(\"Creating new textured plane ...\");\n\n	var material	= new THREE.MeshPhongMaterial({\n	ambient		: 0xffffff,\n	color		: 0xffffff,\n	emissive 	: 0xffffff,\n	shininess	: 10, \n	specular	: 0xffffff,\n	shading		: THREE.SmoothShading,\n	map 		: texture\n	});		\n\n	var geometry = new THREE.CubeGeometry(1, 1, 0.001, 1, 1, 1);\n	var mesh = new THREE.Mesh( geometry, material );\n	mesh.rotation = rotation;\n	mesh.position = position;\n	mesh.scale = scale;\n	scene.add(mesh);\n	\n	mesh.castShadow = true;\n	mesh.receiveShadow = false;\n	mesh.name = \"newTexturedPlaneMesh\";\n\n}\n\nfunction createPlane(scene, position, rotation, scale)\n{	\n	log(\"Creating new plane ...\");\n\n	var materialPlane	= new THREE.MeshPhongMaterial({\n	ambient		: 0xffffff,\n	color		: 0xffffff,\n	shininess	: 10, \n	specular	: 0xffffff,\n	shading		: THREE.SmoothShading,\n	transparent     : true,\n	opacity          : 0.65,\n	});		\n\n	var geometry = new THREE.PlaneGeometry(1, 1);\n	var mesh = new THREE.Mesh( geometry, materialPlane );\n	mesh.rotation = rotation;\n	mesh.position = position;\n	mesh.scale = scale;\n	scene.add(mesh);\n	\n	mesh.castShadow = true;\n	mesh.receiveShadow = true;\n	mesh.name = \"newPlaneMesh\";\n\n}\n\nfunction createSkyBox(scene, path, format, position)\n{\n	log(\"Creating new skyBox\");\n	var urls = [\n		path + 'px' + format, path + 'nx' + format,\n		path + 'py' + format, path + 'ny' + format,\n		path + 'pz' + format, path + 'nz' + format\n	];\n\n	var textureCube = THREE.ImageUtils.loadTextureCube( urls, new THREE.CubeRefractionMapping() );\n\n	var shader = THREE.ShaderLib[ \"cube\" ];\n	shader.uniforms[ \"tCube\" ].value = textureCube;\n\n	var material = new THREE.ShaderMaterial( {\n\n		fragmentShader: shader.fragmentShader,\n		vertexShader: shader.vertexShader,\n		uniforms: shader.uniforms,\n		depthWrite: false,\n		side: THREE.BackSide\n\n	} );\n\n	mesh = new THREE.Mesh( new THREE.CubeGeometry( position.x, position.y, position.z), material );\n	//mesh.receiveShadow = true;\n	scene.add( mesh );\n\n}\n\nfunction create_line( startVertex, endVertex, iColor )\n{\n	var geom = new THREE.Geometry();\n	geom.dynamic = true;\n	geom.vertices = [\n	    startVertex,\n	    endVertex\n	];\n	var color\n	var line = new THREE.Line(geom, new THREE.LineBasicMaterial({ color : iColor, linewidth:3} ));\n	scene.add(line);\n\n	return geom;\n}\n\nfunction update_line(line, startVertex, endVertex)\n{\n	line.vertices[0] = startVertex.clone();\n	line.vertices[1] = endVertex.clone();\n	line.verticesNeedUpdate = true;\n}\n\nfunction onDocumentMouseMove( event ) {\n\n	event.preventDefault();\n\n	mouse.x = ( event.clientX / win.innerWidth ) * 2 - 1;\n	mouse.y = - ( event.clientY / win.innerHeight ) * 2 + 1;\n\n}\n\nfunction onDocumentMouseDown( event ) {\n\n	event.preventDefault();\n\n	var vector = new THREE.Vector3( mouse.x, mouse.y, 0.5 );\n	projector.unprojectVector( vector, cameraLookAt );\n\n	var ray = new THREE.Ray( cameraLookAt.position, vector.subSelf( cameraLookAt.position ).normalize() );\n\n	var intersects = ray.intersectObjects( objects );\n\n	if ( intersects.length > 0 ) {\n		SELECTED = intersects[ 0 ].object;\n		log(\"Object picked: \"+SELECTED.name);\n	}\n\n}\n\nfunction onDocumentMouseUp( event ) {\n}\n\nfunction increaseTilt(){\n	if( controlMode == 0)\n	{	\n		radioTilt += 0.04*radioTiltRate; \n		radioTiltTouched = true;\n		isIncreasingTilt = true;\n	}\n}\n\nfunction decreaseTilt() {\n	if( controlMode == 0)\n	{	\n		radioTilt += -0.04*radioTiltRate; \n		radioTiltTouched = true;\n		isDecreasingTilt = true;\n	}\n}\n\nfunction increaseYaw() {\n	if( controlMode == 0)\n	{	\n		radioYaw += 0.05*radioYawRate; \n		radioYawTouched = true;\n		isIncreasingYaw = true;\n	}\n}\n\nfunction decreaseYaw() {\n	if( controlMode == 0)\n	{	\n		radioYaw += -0.05*radioYawRate; \n		radioYawTouched = true;\n		isDecreasingYaw = true;\n	}\n}\n",
			"file": "html/js/myViewer.js",
			"file_size": 25453,
			"file_write_time": 1370209411000000,
			"settings":
			{
				"buffer_size": 25563,
				"line_ending": "Unix"
			}
		},
		{
			"file": "html/index.html",
			"settings":
			{
				"buffer_size": 21883,
				"line_ending": "Unix"
			}
		},
		{
			"file": "html/index_control.html",
			"settings":
			{
				"buffer_size": 3924,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 167.0,
		"selected_items":
		[
			[
				"git com",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add..."
			],
			[
				"git add",
				"Git: Add..."
			],
			[
				"",
				"Package Control: Install Package"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git ch",
				"Git: Change Branch"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git cha",
				"Git: Change Branch"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"qui",
				"Git: Quick Commit"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"quic",
				"Git: Quick Commit"
			],
			[
				"chan",
				"Git: Change Branch"
			],
			[
				"quick",
				"Git: Quick Commit"
			],
			[
				"git b",
				"Git: Change Branch"
			],
			[
				"git new",
				"Git: New Branch"
			],
			[
				"git p",
				"Git: Push"
			],
			[
				"custo",
				"Git: Custom Command"
			],
			[
				"git",
				"Git: Add..."
			],
			[
				"cust",
				"Git: Custom Command"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pak",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 602.0
	},
	"console":
	{
		"height": 118.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/build/three.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/PIDController.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/build/three.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/virtualjoystick.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/virtualjoystick.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/README.md",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/javascripts.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/pythonHTTPServer.py",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/nodeHTTPServerBase.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/nodeHTTPServerUtils.js",
		"/Users/amuthelet/nodeHTTPServer.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/http-server.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/nodeHTTPServer.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/myWebServer.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/index_vj.html",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/webserver.py",
		"/Users/amuthelet/Downloads/Node js/STEPCODE.txt",
		"/Users/amuthelet/Documents/Mikrokopter/virtualJoystickServer/javascripts.js",
		"/Users/amuthelet/Documents/Mikrokopter/virtualJoystickServer/webserver.py",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/myViewer.js",
		"/Users/amuthelet/Documents/Mikrokopter/virtualJoystickServer/index.html",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/VirtualJoystick.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/Detector.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/models/collada/quadroXL/QuadXL-noCamera.DAE",
		"/Users/amuthelet/Downloads/mrdoob-three.js-9792a0f/examples/misc_controls_orbit.html",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/build/three.min.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/loaders/ColladaLoader.js",
		"/Users/amuthelet/Downloads/mrdoob-three.js-9792a0f/examples/js/loaders/ColladaLoader.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/MarchingCubes.js",
		"/Users/amuthelet/Desktop/todo.txt",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/Cloth.js",
		"/Users/amuthelet/Downloads/PID_Test001/Form1.cs",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/chart.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/js/smoothie.js",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/test.html",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/index.html",
		"/Users/amuthelet/Documents/Mikrokopter/pidController/html/models/collada/quadroXL/QuadXL.DAE",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/js/myViewer.js",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/myViewer.html",
		"/Users/amuthelet/Documents/myWebSite/public_html/index.html",
		"/Users/amuthelet/Library/Application Support/Sublime Text 2/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/AnimatedContentMenu/index.html",
		"/Users/amuthelet/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/index2.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/css3d_youtube.html",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/AnimatedContentMenu/css/style.css",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/js/shaders/HueSaturationShader.js",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/js/shaders/BrightnessContrastShader.js",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/js/shaders/BlendShaderCustom.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_rtt.html",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/html/js/shaders/HorizontalBlurShader.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/js/shaders/FXAAShader.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/css3d_panorama.html",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/js/myViewer.js",
		"/Users/amuthelet/Documents/Mikrokopter/viewer3D/myViewer.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/js/myViewer.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/myViewer.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_materials_video.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/canvas_materials_video.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_materials_texture_filters.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_geometry_hierarchy2.html",
		"/Users/amuthelet/Downloads/mrdoob-three.js-ca224d2/examples/webgl_postprocessing.html",
		"/Users/amuthelet/Downloads/mrdoob-three.js-ca224d2/examples/webgl_rtt.html",
		"/Users/amuthelet/Desktop/Id√©es cadeaux.txt",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_materials_cubemap_balls_refraction.html",
		"/Users/amuthelet/Downloads/mrdoob-three.js-ca224d2/examples/webgl_materials_cubemap.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_lines_dashed.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/js/shaders/SSAOShader.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_postprocessing.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_lensflares.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_loader_obj_mtl.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_multiple_views.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/js/controls/OrbitControls.js",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/README.md",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/editor/index.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/webgl_performance.html",
		"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples/misc_controls_orbit.html",
		"/Users/amuthelet/Desktop/haarcascade_frontalface_alt.xml"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/",
			"/Users/amuthelet/Documents/Mikrokopter/mrdoob-three.js-ca224d2/examples"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"setFromAxisAngle",
			"deltaTime",
			"console",
			"delta",
			"clock",
			"timer",
			"root",
			"viewportWidth",
			"camera",
			"multiply: function ( m, n )",
			"applyMatrix3",
			" =",
			"child",
			"weightForce",
			"createTexturedPlane",
			"function createTexturedPlane(scene, position, rotation, scale, texture)\n",
			"createPlane",
			"launchWebGL",
			"init()",
			"init",
			"toggleMenuItems",
			"closeSubMenu",
			"loadImages",
			"ItemImages",
			"loadImages",
			"find",
			"replace",
			"find",
			"adjustImageSize",
			"loadPage",
			"initEventsSubMenu",
			"init",
			"id",
			"400",
			"window",
			"container",
			"$title",
			"menu",
			"title",
			"ac_content",
			"event",
			"search",
			"comment",
			"lensFlareUpdateCallback",
			"controls",
			"rotation",
			"projector",
			"Projector",
			"projector",
			"objects",
			"Objects",
			"objects",
			"Objects",
			"objects",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"Mouse",
			"mouse",
			"renderBackground",
			"renderScene",
			"Mask",
			"sceneMask",
			"composer3",
			"				composer3.render( delta );\n",
			"container",
			"traverseHierarchy",
			"SceneUtils.js",
			"position.set"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"replace",
			"win"
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "html/js/myViewer.js",
					"settings":
					{
						"buffer_size": 25563,
						"regions":
						{
						},
						"selection":
						[
							[
								13663,
								13663
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6675.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "html/index.html",
					"settings":
					{
						"buffer_size": 21883,
						"regions":
						{
						},
						"selection":
						[
							[
								12565,
								12565
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5732.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "html/index_control.html",
					"settings":
					{
						"buffer_size": 3924,
						"regions":
						{
						},
						"selection":
						[
							[
								3412,
								3412
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 950.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.git":
	{
		"height": 71.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"myv",
				"html/js/myViewer.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 229.0,
	"status_bar_visible": true
}
